@using BlazorWASMCustomAuth.Security.Shared.Constants;
<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <AuthorizeView>
        <Authorized>
            @if (_AdminMenuHeader)
            {
                <MudListSubheader Class="mt-2 mb-n2">Admin</MudListSubheader>
            }
            @if (_AccessUsersView)
            {
                <MudNavLink Href="/admin/users" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Users</MudNavLink>
            }
            @if (_AccessRolesView)
            {
                <MudNavLink Href="/admin/roles" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Roles</MudNavLink>
            }
            @if (_AccessAuthenticationProviders)
            {
                <MudNavLink Href="/admin/authenticationproviders" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Authentication Providers</MudNavLink>
            }
        </Authorized>
    </AuthorizeView>
</MudNavMenu>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private bool _AdminMenuHeader;
    private bool _AccessUsersView;
    private bool _AccessRolesView;
    private bool _AccessAuthenticationProviders;

    protected override async Task OnInitializedAsync()
    {
        var state = await authenticationState;        
        SetPermissions(state);
    }

    private void SetPermissions(AuthenticationState state)
    {
        _AccessUsersView = securityService.HasPermission(state.User, Access.Users.View);
        _AccessRolesView = securityService.HasPermission(state.User, Access.Roles.View);
        _AccessAuthenticationProviders = securityService.HasPermission(state.User, Access.AuthenticationProvider.View);

        if (_AccessUsersView || _AccessRolesView || _AccessAuthenticationProviders)
            _AdminMenuHeader = true;
    }
}