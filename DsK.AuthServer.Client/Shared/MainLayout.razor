@inject IJSRuntime JSRuntime
@inherits LayoutComponentBase
@using DsK.AuthServer.Client.ExceptionHandling

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<AuthorizeView>
    <NotAuthorized>
        <MudLayout>
            <MudAppBar Elevation="4" Color="Color.Primary">
                <MudSpacer />
            </MudAppBar>
            <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
                <MudPaper Elevation="25" Class="pa-8" Style="width: 500px;">
                    <Login />
                </MudPaper>
            </MudContainer>
        </MudLayout>
    </NotAuthorized>
    <Authorized>
        <MudLayout>
            <MudAppBar Color="Color.Primary" Elevation="1">
                <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Edge="Edge.Start" />
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Outlined.Logout" Color="Color.Inherit" OnClick="Logout" />
            </MudAppBar>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
                <MudDrawerHeader>
                    <MudText Typo="Typo.h6">DsK.AuthServer</MudText>
                </MudDrawerHeader>
                <NavMenu />
            </MudDrawer>
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.Large" Class="my-8 pt-8">
                    <CustomErrorBoundary @ref="errorBoundary">
                        <ChildContent>
                            @Body
                        </ChildContent>
                        <ErrorContent Context="Excepcion">
                            <div class="alert">
                                <h3>@Excepcion.GetType()</h3>
                                <h3>@Excepcion.Message</h3>
                                <button class="btn btn-info" @onclick="() => GoBack()">Go back to previous page</button>
                            </div>
                        </ErrorContent>
                    </CustomErrorBoundary>
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    bool _drawerOpen = true;
    private CustomErrorBoundary errorBoundary;

    protected override void OnInitialized()
    {
        errorBoundary = new CustomErrorBoundary();
    }
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override void OnParametersSet()
    {
        errorBoundary?.Recover();
    }

    private void ErrorRecover()
    {
        _navigationManager.NavigateTo("/applications");
    }

    

    // Go back in browser using Javascript on a Razor Page
    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    async Task Logout()
    {
        await securityService.LogoutAsync();
        _navigationManager.NavigateTo("/login");
    }
}